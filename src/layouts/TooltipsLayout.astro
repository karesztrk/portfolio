---
import { findTooltips } from "@/util/collections.util.ts";
import Layout from "./Layout.astro";
import SearchDialog from "@components/SearchDialog.astro";
import Fields from "@/components/Fields.astro";
import Tags from "@/components/Tags.astro";
import TooltipHeader from "@/components/TooltipHeader.astro";
import TooltipSidebar from "@/components/TooltipSidebar.astro";

const collections = await findTooltips();
---

<Layout title="Tooltips">
  <link
    slot="head"
    rel="preload"
    href="/tooltips/collections.json"
    as="fetch"
    crossorigin
  />
  <h1>Tooltips</h1>
  <article>
    <tt-view>
      <TooltipHeader class="tt-header" aria-label="Breadcrumb">
        <span>Tooltips</span>
      </TooltipHeader>
      <tt-content>
        <TooltipSidebar id="tt-tree" collections={collections} />
        <article>
          <p>☝️ Select a tooltip</p>
        </article></tt-content
      >
    </tt-view>

    <SearchDialog id="search-dialog" collections={collections} />
  </article>

  <template id="tt-article-template">
    <h2 id="title"></h2>
    <Fields>
      <Tags data={["tag"]} />
    </Fields>
    <div id="content"></div>
  </template>

  <script>
    import { loadCollections } from "@/data/api";
    import TooltipsView from "@/webcomponents/TooltipsView";

    const view = document.querySelector("tt-view") as TooltipsView;
    if (view) {
      loadCollections().then((resp) => {
        view.collections = resp;
      });
    }
  </script>

  <style>
    nav {
      position: relative;
      z-index: 2;
      &:has(#toggle:checked) {
        & ~ tt-content {
          & > article {
            --transition-time: 500ms;
            --easing: cubic-bezier(0.32, 0, 0.67, 0);
            translate: 90% 0;
          }
        }
      }
      &:not(:has(#toggle:checked)) {
        & ~ tt-content {
          aside {
            opacity: 0;
            display: none;
          }
        }
      }
    }

    tt-content {
      --_height: 500px;
      display: block;
      position: relative;
      height: var(--_height);
      z-index: 1;
      isolation: isolate;

      aside {
        z-index: 1;
      }

      article {
        --easing: cubic-bezier(0.33, 1, 0.68, 1);
        --transition-time: 400ms;
        position: relative;
        z-index: 2;
        background: var(--color-background);
        transition: translate var(--transition-time) var(--easing);
        height: 100%;
        box-shadow: 0 0 60px 60px var(--color-background);
      }
    }

    tt-view {
      position: relative;
      display: block;
      overflow: hidden;
      isolation: isolate;
    }
  </style>
</Layout>

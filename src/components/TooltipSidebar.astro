---
import {
  tooltipCollectionNames,
  type TooltipCollectionType,
} from "@/util/collections.util.ts";
import { formatTitle } from "@/util/blog.util";
import Icon from "astro-svg-icon";
import Markdown from "@/assets/images/icons/Markdown.svg";
import Folder from "@/assets/images/icons/Folder.svg";
import type { HTMLAttributes } from "astro/types";
import type { CollectionEntry } from "astro:content";

interface Props extends HTMLAttributes<"div"> {
  collections: Record<
    TooltipCollectionType,
    CollectionEntry<TooltipCollectionType>[]
  >;
}

const { collections, ...rest } = Astro.props;
---

<aside {...rest}>
  <form>
    <h3>Tree view</h3>
    <ul>
      {
        tooltipCollectionNames.map((name) => (
          <li>
            <details name="category">
              <summary>
                <Icon
                  src={Folder.src}
                  viewBox={`0 0 ${Folder.width} ${Folder.height}`}
                  height="14px"
                />
                {name}
              </summary>
              <ul>
                {collections[name].map((entry) => (
                  <li>
                    <button name="slug" value={entry.slug}>
                      <Icon
                        src={Markdown.src}
                        viewBox={`0 0 ${Markdown.width} ${Markdown.height}`}
                      />
                      {formatTitle(entry.id)}
                    </button>
                  </li>
                ))}
              </ul>
            </details>
          </li>
        ))
      }
    </ul>
  </form>
</aside>

<style>
  details {
    background: none;
    padding: 0;
    margin: 0;
    border: 0;
  }

  summary {
    background: none;
    font-variation-settings: "CASL" 0;
    font-size: 1rem;

    &:hover,
    &:focus {
      color: var(--color-title);
    }
  }

  aside {
    --easing: cubic-bezier(0.65, 0, 0.35, 1);
    --transition-time: 500ms;
    position: absolute;
    inset: 0;
    overflow: auto;
    transition: all var(--transition-time) var(--easing) allow-discrete;
    font-size: 1rem;
    opacity: 1;
  }

  @starting-style {
    aside {
      opacity: 0;
    }
  }

  p {
    font-variation-settings: "CASL" 0;
  }

  button {
    background: none;
    padding: 0;
    margin: 0;
    font-family: "Recursive", system-ui;
  }

  ul,
  li {
    list-style: none;
  }

  h3 {
    margin-block-start: 0;
  }

  ul {
    margin: 0;
    > li:first-child {
      margin-block-start: 0;
    }
  }

  li {
    color: var(--color-li-group-text);
    font-size: 1rem;

    &[aria-current] {
      button {
        outline: none;
        background: var(--color-li-bg-hl);
        color: var(--color-background);
      }
    }
  }

  button {
    font-variation-settings: "CASL" 0;
    color: var(--color-text);
    background: var(--color-background);
    border: 0;
    width: 100%;
    text-align: left;
    font-size: 1rem;
    padding: 0.375em 0.5em;
    display: flex;
    align-items: center;
    gap: 0.5em;
    margin: 0;
    text-decoration: none;

    &:hover,
    &[aria-selected] {
      outline: none;
      background: var(--color-li-bg-hl);
      color: var(--color-background);
    }

    &:before,
    &:after {
      content: none;
    }
  }

  label {
    line-height: 1rem;
    &:hover,
    &:focus-visible {
      outline-style: auto;
      outline-offset: var(--button-outline-offset);
    }
  }
</style>

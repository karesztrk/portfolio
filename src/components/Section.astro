---
interface InExpandable {
  id?: string;
  expandable?: false;
  class?: string;
}

interface Expandable {
  id: string;
  title?: string;
  expandable: true;
  class?: string;
}

type Props = InExpandable | Expandable;

// Yes, its only CSS
const { id = "", expandable, ...rest } = Astro.props;
const readMoreInput = `${id.replace(/\s/gi, "-")}-read-more`;
---

<section id={id} {...rest}>
  <slot name="title" />
  {
    expandable && (
      <input
        id={readMoreInput}
        class="read-more visually-hidden"
        type="checkbox"
        aria-hidden="true"
      />
    )
  }
  <div class:list={["text", { expandable }]}>
    <slot />
  </div>
  {
    expandable && (
      <label class="read-more-label" for={readMoreInput}>
        <span class="visually-hidden">Toggle section</span>
      </label>
    )
  }
</section>

<style>
  .text.expandable {
    display: -webkit-box;
    -webkit-line-clamp: 5;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-bottom: calc(var(--p-margin) * 0.5);
  }

  .read-more {
    & ~ .read-more-label {
      font-family: "Silkscreen", monospace;
      cursor: pointer;
      color: var(--color-link-text);
      font-size: 1rem;

      &:hover {
        text-decoration: underline;
        text-decoration-style: dashed;
        text-decoration-thickness: 2px;
      }
    }

    &:checked + .text {
      display: block;
      margin-bottom: 0;
    }

    &:checked ~ .read-more-label::before {
      content: "less...";
    }

    & ~ .read-more-label::before {
      content: "more...";
    }

    &:focus ~ .read-more-label::before {
      text-decoration: underline;
      text-decoration-style: var(--link-hover-decoration);
      text-decoration-thickness: var(--link-hover-decoration-thickness);
    }
  }
</style>

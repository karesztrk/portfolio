---
import type { HTMLAttributes } from "astro/types";
import { formatTitle } from "@/util/blog.util.ts";
import Icon from "astro-svg-icon";
import Search from "@/assets/images/icons/Search.svg";
import Markdown from "@/assets/images/icons/Markdown.svg";
import Input from "@components/Input.astro";
import type { TooltipCollection } from "@/util/collections.util.ts";

interface Props extends HTMLAttributes<"dialog"> {
  collections: TooltipCollection;
}

const { collections, ...rest } = Astro.props;
---

<dialog {...rest}>
  <form method="dialog">
    <collection-filter>
      <div class="search-header">
        <Input id="search-input" wrapper-class="flex-1" type="search" autofocus>
          <Icon
            src={Search.src}
            viewBox={`0 0 ${Search.width} ${Search.height}`}
          />
        </Input>

        <button
          id="close-button"
          value=""
          name="slug"
          formmethod="dialog"
          aria-label="Close dialog">X</button
        >
      </div>

      <menu tabindex={-1}>
        {
          Object.entries(collections).map(([name, collection]) => (
            <li class="collection">
              {name}
              <ul>
                {collection.map((entry) => (
                  <li class="entry">
                    <button name="slug" class="entry-button" value={entry.slug}>
                      <Icon
                        src={Markdown.src}
                        viewBox={`0 0 ${Markdown.width} ${Markdown.height}`}
                      />
                      {formatTitle(entry.id)}
                    </button>
                  </li>
                ))}
              </ul>
            </li>
          ))
        }
      </menu>
    </collection-filter>
  </form>
</dialog>

<script>
  import "@/webcomponents/CollectionFilter";
</script>

<style>
  dialog {
    & .search-header {
      display: flex;
      flex-flow: row nowrap;
      gap: var(--space-xs);
      > #close-button {
        flex: 0;
        font-family: "Silkscreen", monospace;
        color: var(--color-text);
        background: none;
        border: 0;
        min-block-size: revert;
        min-inline-size: revert;
      }
    }
    & collection-filter {
      & menu,
      ul,
      li {
        list-style: none;
        padding: 0;
      }

      & ul {
        margin: 0;
        > li:first-child {
          margin-block-start: 0;
        }
      }

      > menu {
        overflow: auto;
        max-height: 450px;
        > li {
          color: var(--color-li-group-text);
          font-family: "Silkscreen", monospace;
        }
      }

      & .entry-button {
        font-family: "Recursive", monospace;
        color: var(--color-text);
        background: var(--color-background);
        border: 0;
        width: 100%;
        text-align: left;
        font-size: 1rem;
        padding: 0.375em 0.5em;
        display: flex;
        align-items: center;
        gap: 0.5em;
        margin: 0;
        text-decoration: none;

        &:hover,
        &[aria-selected] {
          outline: none;
          background: var(--color-li-bg-hl);
          color: var(--color-background);
        }

        &:before,
        &:after {
          content: none;
        }
      }
    }
  }
</style>
